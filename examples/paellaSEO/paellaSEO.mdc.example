description: "paellaSEO - Extensión Chrome para análisis y recomendaciones SEO"
globs: ["**/*"]

rules:
  - name: "project-overview"
    description: "Visión general del proyecto paellaSEO"
    patterns: ["**/*"]
    instructions: [
      "# paellaSEO - Extensión de Chrome para análisis SEO",
      "",
      "paellaSEO es una extensión de Chrome diseñada para proporcionar análisis SEO en tiempo real y recomendaciones de mejora para cualquier página web que el usuario esté visitando.",
      "",
      "## Propósito",
      "Ofrecer un análisis SEO accesible, inmediato y práctico sin necesidad de utilizar herramientas complejas o servicios externos, facilitando que desarrolladores, creadores de contenido y propietarios de sitios web puedan mejorar su posicionamiento de manera eficiente.",
      "",
      "## Documentación",
      "La documentación completa del proyecto se encuentra en la carpeta `docs/paellaSEO/`:",
      "- `00_index.md`: Visión general del proyecto",
      "- `feature_documentation.md`: Descripción detallada de características",
      "- `bug_documentation.md`: Sistema de seguimiento de errores",
      "- `quick_task_documentation.md`: Gestión de tareas y planificación"
    ]

  - name: "architecture-overview"
    description: "Arquitectura y estructura del proyecto"
    patterns: ["manifest.json", "src/**/*", "assets/**/*"]
    instructions: [
      "# Arquitectura de paellaSEO",
      "",
      "La extensión sigue la arquitectura estándar de extensiones de Chrome con Manifest V3:",
      "",
      "## Componentes Principales",
      "1. **Analizador SEO**: Evalúa elementos HTML y asigna puntuación",
      "2. **Sistema de Recomendaciones**: Genera sugerencias de mejora basadas en el análisis",
      "3. **Interfaz de Usuario**: Presenta resultados y recomendaciones al usuario",
      "4. **Exportador de Informes**: Genera informes en PDF/HTML",
      "",
      "## Estructura de Archivos",
      "```",
      "paellaSEO/",
      "|-- manifest.json       # Configuración principal",
      "|-- src/",
      "|   |-- popup/          # Interfaz de usuario principal",
      "|   |-- background/      # Procesos en segundo plano",
      "|   |-- content/         # Scripts que analizan el DOM",
      "|   |-- utils/           # Utilidades compartidas",
      "|-- assets/              # Recursos estáticos",
      "|-- tests/               # Pruebas unitarias e integración",
      "```"
    ]

  - name: "coding-standards"
    description: "Estándares y prácticas de codificación"
    patterns: ["src/**/*.{js,jsx}", "tests/**/*.{js,jsx}"]
    instructions: [
      "# Estándares de Codificación para paellaSEO",
      "",
      "## Reglas Generales",
      "- Seguir la guía de estilo de Airbnb para JavaScript",
      "- Usar ES6+ para todo el código JavaScript",
      "- Documentar funciones y clases con JSDoc",
      "- Mantener cobertura de pruebas mínima del 80%",
      "",
      "## Nomenclatura",
      "- Clases: PascalCase (ej. `SeoAnalyzer`)",
      "- Funciones/métodos: camelCase (ej. `analyzeMetaTags`)",
      "- Constantes: UPPER_SNAKE_CASE (ej. `MAX_SCORE`)",
      "- Variables: camelCase (ej. `pageScore`)",
      "- Archivos de componentes React: PascalCase (ej. `ScoreDisplay.jsx`)",
      "- Otros archivos: kebab-case (ej. `dom-helpers.js`)",
      "",
      "## Estructura de Código",
      "- Longitud máxima de línea: 100 caracteres",
      "- Indentación: 2 espacios",
      "- Imports agrupados (React, externos, internos)",
      "- Evitar funciones con más de 30 líneas",
      "- Evitar archivos con más de 300 líneas"
    ]

  - name: "feature-implementation-guidelines"
    description: "Directrices para implementación de características"
    patterns: ["src/**/*"]
    instructions: [
      "# Directrices para Implementación de Características",
      "",
      "## Analizador SEO",
      "- Implementar en `src/content/analyzer.js`",
      "- Crear clases específicas para cada tipo de análisis (meta etiquetas, encabezados, etc.)",
      "- Utilizar el patrón Observer para notificar cambios en el análisis",
      "- Mantener el tiempo de análisis por debajo de 3 segundos",
      "- Implementar análisis asíncrono para no bloquear la UI",
      "",
      "## Sistema de Recomendaciones",
      "- Implementar en `src/content/recommender.js`",
      "- Priorizar recomendaciones por impacto potencial",
      "- Estructurar recomendaciones con título, descripción, impacto y código ejemplo",
      "- Permitir marcar recomendaciones como implementadas o ignoradas",
      "",
      "## Interfaz de Usuario",
      "- Implementar con React en `src/popup/`",
      "- Diseño responsivo para adaptarse a diferentes tamaños",
      "- Seguir los principios de Material Design",
      "- Implementar modo oscuro/claro",
      "- Asegurar una UX intuitiva y accesible (WCAG 2.1 AA)",
      "",
      "## Exportación de Informes",
      "- Implementar en `src/utils/export-utils.js`",
      "- Utilizar plantillas HTML para generar informes",
      "- Implementar conversión a PDF con jsPDF",
      "- Asegurar diseño profesional y legibilidad"
    ]

  - name: "testing-guidelines"
    description: "Directrices para pruebas"
    patterns: ["tests/**/*", "src/**/*.test.js"]
    instructions: [
      "# Directrices de Pruebas",
      "",
      "## Pruebas Unitarias",
      "- Usar Jest como framework principal",
      "- Alcanzar cobertura mínima del 80%",
      "- Probar funciones y componentes de forma aislada",
      "- Usar mocks para dependencias externas",
      "",
      "## Pruebas de Integración",
      "- Probar interacción entre módulos principales",
      "- Simular interacción con el DOM usando JSDOM",
      "- Verificar flujos completos de análisis y recomendación",
      "",
      "## Pruebas E2E",
      "- Usar Puppeteer para pruebas en entorno Chrome real",
      "- Verificar funcionamiento completo de la extensión",
      "- Probar en páginas representativas con diferentes estructuras",
      "",
      "## Casos de Prueba Críticos",
      "1. Análisis correcto de meta etiquetas (con y sin caracteres especiales)",
      "2. Detección de múltiples etiquetas H1",
      "3. Evaluación correcta de estructura de encabezados",
      "4. Generación apropiada de recomendaciones según problemas detectados",
      "5. Rendimiento aceptable en páginas grandes (>1000 elementos)"
    ]

  - name: "browser-compatibility"
    description: "Compatibilidad con navegadores"
    patterns: ["src/**/*", "manifest.json"]
    instructions: [
      "# Compatibilidad con Navegadores",
      "",
      "## Soporte Primario",
      "- Chrome 90+ (objetivo principal)",
      "",
      "## Consideraciones de Compatibilidad",
      "- Usar características de JavaScript compatibles con Chrome 90+",
      "- Evitar APIs experimentales o no estables",
      "- Seguir especificaciones de Manifest V3",
      "- Mantener compatibilidad con eventuales cambios de Chrome",
      "",
      "## Testing Cross-Browser (Futuro)",
      "En futuras versiones se podría considerar compatibilidad con:",
      "- Firefox (usando WebExtensions API)",
      "- Edge (basado en Chromium)"
    ]

  - name: "performance-guidelines"
    description: "Directrices de rendimiento"
    patterns: ["src/**/*"]
    instructions: [
      "# Directrices de Rendimiento",
      "",
      "## Objetivos de Rendimiento",
      "- Tiempo de análisis inicial < 3 segundos",
      "- Actualización de UI < 100ms",
      "- Uso de memoria < 50MB",
      "- Tamaño total de la extensión < 5MB",
      "",
      "## Optimizaciones",
      "- Implementar análisis progresivo para páginas grandes",
      "- Usar análisis asíncrono para no bloquear la UI",
      "- Implementar caché para análisis recientes",
      "- Comprimir assets (imágenes, CSS, JS)",
      "- Usar lazy loading para componentes no críticos",
      "",
      "## Monitoreo",
      "- Implementar telemetría opcional para tiempos de análisis",
      "- Incluir herramientas de diagnóstico en modo desarrollo",
      "- Registrar y reportar problemas de rendimiento"
    ]

  - name: "security-guidelines"
    description: "Directrices de seguridad"
    patterns: ["src/**/*", "manifest.json"]
    instructions: [
      "# Directrices de Seguridad",
      "",
      "## Permisos de la Extensión",
      "- Solicitar solo permisos mínimos necesarios",
      "- Justificar claramente cada permiso solicitado",
      "- Usar activeTab en lugar de permisos amplios cuando sea posible",
      "",
      "## Protección de Datos",
      "- No enviar datos de análisis a servidores externos sin consentimiento explícito",
      "- Almacenar datos localmente usando Chrome Storage API",
      "- No almacenar información sensible o personal",
      "",
      "## Mitigación de Riesgos",
      "- Validar y sanitizar todo el contenido del DOM antes de procesarlo",
      "- Prevenir inyección de scripts en la UI",
      "- Aplicar CSP (Content Security Policy) adecuado"
    ]

patterns:
  - name: "manifest"
    description: "Archivo de configuración de la extensión Chrome"
    globs: ["manifest.json"]
    template: |
      {
        "manifest_version": 3,
        "name": "paellaSEO",
        "version": "0.1.0",
        "description": "Herramienta para análisis SEO en tiempo real",
        "permissions": ["activeTab", "storage"],
        "action": {
          "default_popup": "src/popup/popup.html",
          "default_icon": {
            "16": "assets/icons/icon16.png",
            "48": "assets/icons/icon48.png",
            "128": "assets/icons/icon128.png"
          }
        },
        "background": {
          "service_worker": "src/background/background.js"
        },
        "content_scripts": [
          {
            "matches": ["<all_urls>"],
            "js": ["src/content/content.js"]
          }
        ],
        "icons": {
          "16": "assets/icons/icon16.png",
          "48": "assets/icons/icon48.png",
          "128": "assets/icons/icon128.png"
        }
      }

  - name: "content-script"
    description: "Script que se ejecuta en el contexto de la página web"
    globs: ["src/content/content.js"]
    template: |
      /**
       * paellaSEO - Content Script
       * Se ejecuta en el contexto de la página web para analizar su contenido
       */
      
      // Importar módulos
      import { SeoAnalyzer } from './analyzer.js';
      import { SeoRecommender } from './recommender.js';
      
      // Inicializar cuando el DOM esté completamente cargado
      document.addEventListener('DOMContentLoaded', () => {
        console.log('paellaSEO: Analizando página...');
        
        // Crear instancia del analizador
        const analyzer = new SeoAnalyzer(document);
        
        // Realizar análisis
        const analysisResults = analyzer.analyze();
        
        // Generar recomendaciones basadas en el análisis
        const recommender = new SeoRecommender(analysisResults);
        const recommendations = recommender.generateRecommendations();
        
        // Enviar resultados al popup
        chrome.runtime.sendMessage({
          action: 'analysisComplete',
          results: analysisResults,
          recommendations: recommendations
        });
      });
      
      // Escuchar mensajes del popup o background
      chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
        if (message.action === 'requestAnalysis') {
          // Código para realizar análisis bajo demanda
        }
        
        // Siempre devolver true si se va a responder de forma asíncrona
        return true;
      });

  - name: "analyzer-class"
    description: "Clase principal para análisis SEO"
    globs: ["src/content/analyzer.js"]
    template: |
      /**
       * Clase principal para el análisis SEO
       * Evalúa elementos HTML y asigna puntuaciones según mejores prácticas
       */
      export class SeoAnalyzer {
        /**
         * Constructor
         * @param {Document} dom - El documento DOM a analizar
         */
        constructor(dom) {
          this.dom = dom;
          this.scores = {};
          this.issues = [];
          this.totalScore = 0;
        }
        
        /**
         * Realiza el análisis completo
         * @returns {Object} Resultados del análisis
         */
        analyze() {
          this.analyzeMetaTags();
          this.analyzeHeadings();
          this.analyzeContent();
          this.analyzeLinks();
          this.analyzeImages();
          this.calculateTotalScore();
          
          return {
            score: this.totalScore,
            issues: this.issues,
            detailedScores: this.scores
          };
        }
        
        /**
         * Analiza meta etiquetas
         */
        analyzeMetaTags() {
          // Implementación del análisis de meta etiquetas
        }
        
        /**
         * Analiza estructura de encabezados
         */
        analyzeHeadings() {
          // Implementación del análisis de encabezados
        }
        
        /**
         * Analiza contenido textual
         */
        analyzeContent() {
          // Implementación del análisis de contenido
        }
        
        /**
         * Analiza enlaces
         */
        analyzeLinks() {
          // Implementación del análisis de enlaces
        }
        
        /**
         * Analiza imágenes
         */
        analyzeImages() {
          // Implementación del análisis de imágenes
        }
        
        /**
         * Calcula puntuación total basada en análisis individuales
         */
        calculateTotalScore() {
          // Algoritmo para calcular puntuación ponderada
        }
      }

  - name: "recommender-class"
    description: "Clase para generar recomendaciones de mejora"
    globs: ["src/content/recommender.js"]
    template: |
      /**
       * Clase para generar recomendaciones de mejora SEO
       * Basada en los resultados del análisis
       */
      export class SeoRecommender {
        /**
         * Constructor
         * @param {Object} analysisResults - Resultados del análisis SEO
         */
        constructor(analysisResults) {
          this.analysis = analysisResults;
          this.recommendations = [];
        }
        
        /**
         * Genera recomendaciones basadas en el análisis
         * @returns {Array} Lista de recomendaciones
         */
        generateRecommendations() {
          this.checkMetaTagsRecommendations();
          this.checkHeadingsRecommendations();
          this.checkContentRecommendations();
          this.checkLinkRecommendations();
          this.checkImageRecommendations();
          this.prioritizeRecommendations();
          
          return this.recommendations;
        }
        
        /**
         * Genera recomendaciones para meta etiquetas
         */
        checkMetaTagsRecommendations() {
          // Implementación de recomendaciones para meta etiquetas
        }
        
        /**
         * Genera recomendaciones para encabezados
         */
        checkHeadingsRecommendations() {
          // Implementación de recomendaciones para encabezados
        }
        
        /**
         * Genera recomendaciones para contenido
         */
        checkContentRecommendations() {
          // Implementación de recomendaciones para contenido
        }
        
        /**
         * Genera recomendaciones para enlaces
         */
        checkLinkRecommendations() {
          // Implementación de recomendaciones para enlaces
        }
        
        /**
         * Genera recomendaciones para imágenes
         */
        checkImageRecommendations() {
          // Implementación de recomendaciones para imágenes
        }
        
        /**
         * Prioriza recomendaciones por impacto
         */
        prioritizeRecommendations() {
          // Algoritmo de priorización
        }
      }

  - name: "popup-react"
    description: "Componente principal del popup (React)"
    globs: ["src/popup/components/App.jsx"]
    template: |
      import React, { useState, useEffect } from 'react';
      import ScoreDisplay from './ScoreDisplay';
      import IssuesList from './IssuesList';
      import RecommendationsList from './RecommendationsList';
      import LoadingIndicator from './LoadingIndicator';
      import './App.css';
      
      /**
       * Componente principal de la aplicación
       */
      const App = () => {
        const [loading, setLoading] = useState(true);
        const [analysisResults, setAnalysisResults] = useState(null);
        const [recommendations, setRecommendations] = useState([]);
        const [activeTab, setActiveTab] = useState('summary');
        
        // Solicitar análisis al cargar
        useEffect(() => {
          const requestAnalysis = async () => {
            try {
              const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
              const tabId = tabs[0].id;
              
              // Escuchar mensajes del content script
              chrome.runtime.onMessage.addListener((message) => {
                if (message.action === 'analysisComplete') {
                  setAnalysisResults(message.results);
                  setRecommendations(message.recommendations);
                  setLoading(false);
                }
              });
              
              // Solicitar análisis
              chrome.tabs.sendMessage(tabId, { action: 'requestAnalysis' });
            } catch (error) {
              console.error('Error al solicitar análisis:', error);
              setLoading(false);
            }
          };
          
          requestAnalysis();
        }, []);
        
        // Renderizado condicional según estado
        if (loading) {
          return <LoadingIndicator message="Analizando página..." />;
        }
        
        return (
          <div className="app-container">
            <header>
              <h1>paellaSEO</h1>
              <ScoreDisplay score={analysisResults?.score || 0} />
            </header>
            
            <nav className="tabs">
              <button 
                className={activeTab === 'summary' ? 'active' : ''}
                onClick={() => setActiveTab('summary')}
              >
                Resumen
              </button>
              <button 
                className={activeTab === 'issues' ? 'active' : ''}
                onClick={() => setActiveTab('issues')}
              >
                Problemas
              </button>
              <button 
                className={activeTab === 'recommendations' ? 'active' : ''}
                onClick={() => setActiveTab('recommendations')}
              >
                Recomendaciones
              </button>
            </nav>
            
            <main>
              {activeTab === 'summary' && (
                <div className="summary-tab">
                  {/* Contenido del resumen */}
                </div>
              )}
              
              {activeTab === 'issues' && (
                <IssuesList issues={analysisResults?.issues || []} />
              )}
              
              {activeTab === 'recommendations' && (
                <RecommendationsList recommendations={recommendations} />
              )}
            </main>
            
            <footer>
              <button className="export-btn">Exportar Informe</button>
            </footer>
          </div>
        );
      };
      
      export default App;

  - name: "background-script"
    description: "Script de fondo para la extensión"
    globs: ["src/background/background.js"]
    template: |
      /**
       * paellaSEO - Background Script
       * Maneja eventos en segundo plano y comunicación entre componentes
       */
      
      // Escuchar cuando la extensión se instala o actualiza
      chrome.runtime.onInstalled.addListener((details) => {
        if (details.reason === 'install') {
          // Acciones para primera instalación
          console.log('paellaSEO instalado correctamente');
          
          // Inicializar almacenamiento
          chrome.storage.local.set({
            userPreferences: {
              darkMode: false,
              exportFormat: 'pdf',
              autoAnalyze: true
            },
            analysisHistory: []
          });
        } else if (details.reason === 'update') {
          // Acciones para actualización
          console.log(`paellaSEO actualizado a la versión ${chrome.runtime.getManifest().version}`);
        }
      });
      
      // Escuchar mensajes
      chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
        if (message.action === 'saveToHistory') {
          // Guardar análisis en historial
          saveAnalysisToHistory(message.data, sender.tab.url)
            .then(() => sendResponse({ success: true }))
            .catch((error) => sendResponse({ success: false, error }));
          
          return true; // Indicar respuesta asíncrona
        }
        
        if (message.action === 'exportReport') {
          // Generar y exportar informe
          generateReport(message.data, message.format)
            .then((result) => sendResponse({ success: true, result }))
            .catch((error) => sendResponse({ success: false, error }));
          
          return true; // Indicar respuesta asíncrona
        }
      });
      
      /**
       * Guarda un análisis en el historial
       * @param {Object} analysis - Resultados del análisis
       * @param {string} url - URL analizada
       */
      async function saveAnalysisToHistory(analysis, url) {
        try {
          // Obtener historial actual
          const data = await chrome.storage.local.get('analysisHistory');
          const history = data.analysisHistory || [];
          
          // Añadir nuevo análisis
          history.unshift({
            url,
            date: new Date().toISOString(),
            score: analysis.score,
            summary: analysis.summary
          });
          
          // Limitar historial a 50 entradas
          if (history.length > 50) {
            history.pop();
          }
          
          // Guardar historial actualizado
          await chrome.storage.local.set({ analysisHistory: history });
          
          return true;
        } catch (error) {
          console.error('Error al guardar en historial:', error);
          throw error;
        }
      }
      
      /**
       * Genera un informe exportable
       * @param {Object} data - Datos para el informe
       * @param {string} format - Formato de exportación (pdf, html)
       */
      async function generateReport(data, format) {
        // Implementación de generación de informes
      }

instructions:
  - name: "setup-project"
    description: "Configurar el proyecto inicial"
    content: |
      # Configuración Inicial del Proyecto
      
      Para configurar el proyecto paellaSEO, sigue estos pasos:
      
      1. Crear la estructura básica del proyecto según el patrón especificado
      2. Inicializar NPM e instalar dependencias:
      
      ```bash
      npm init -y
      npm install react react-dom
      npm install --save-dev webpack webpack-cli babel-loader @babel/core @babel/preset-env @babel/preset-react
      npm install --save-dev jest @testing-library/react @testing-library/jest-dom
      npm install --save-dev eslint eslint-config-airbnb
      ```
      
      3. Configurar Webpack para el bundling:
      
      ```javascript
      // webpack.config.js
      const path = require('path');
      
      module.exports = {
        mode: 'development',
        entry: {
          popup: './src/popup/index.jsx',
          content: './src/content/content.js',
          background: './src/background/background.js'
        },
        output: {
          path: path.resolve(__dirname, 'dist'),
          filename: '[name].js'
        },
        module: {
          rules: [
            {
              test: /\.(js|jsx)$/,
              exclude: /node_modules/,
              use: {
                loader: 'babel-loader',
                options: {
                  presets: ['@babel/preset-env', '@babel/preset-react']
                }
              }
            },
            {
              test: /\.css$/,
              use: ['style-loader', 'css-loader']
            }
          ]
        },
        resolve: {
          extensions: ['.js', '.jsx']
        }
      };
      ```
      
      4. Configurar ESLint siguiendo la guía Airbnb
      5. Configurar Jest para pruebas

  - name: "implement-core-analyzer"
    description: "Implementar el analizador SEO básico"
    content: |
      # Implementación del Analizador SEO Básico
      
      Para implementar el analizador SEO básico:
      
      1. Crear la clase `SeoAnalyzer` en `src/content/analyzer.js`
      2. Implementar métodos para analizar elementos críticos SEO:
      
      ## Elementos a analizar:
      
      ### Meta Etiquetas Críticas
      - `<title>`: Verificar presencia, longitud (50-60 caracteres) y relevancia
      - `<meta name="description">`: Verificar presencia, longitud (120-158 caracteres)
      - `<meta name="viewport">`: Verificar configuración para móviles
      
      ### Estructura de Encabezados
      - Verificar presencia de un único `<h1>`
      - Verificar jerarquía correcta (H1 > H2 > H3...)
      - Verificar longitud adecuada de encabezados
      
      ### Enlaces
      - Verificar presencia de enlaces internos
      - Verificar textos de anclaje descriptivos
      - Detectar enlaces rotos
      
      ### Imágenes
      - Verificar atributos `alt` en imágenes
      - Verificar tamaño adecuado
      
      ## Algoritmo de puntuación
      
      Implementar sistema de puntuación ponderada:
      - Meta etiquetas: 30%
      - Estructura de encabezados: 25%
      - Contenido: 20%
      - Enlaces: 15%
      - Imágenes: 10%
      
      Cada categoría debe evaluarse en escala de 0-100 y contribuir proporcionalmente a la puntuación final.

  - name: "implement-ui-components"
    description: "Implementar componentes de interfaz de usuario"
    content: |
      # Implementación de la Interfaz de Usuario
      
      Para implementar la interfaz de usuario con React:
      
      1. Crear la estructura básica del popup en `src/popup/popup.html`
      2. Implementar los siguientes componentes React:
      
      ## Componentes Principales
      
      ### ScoreDisplay
      - Muestra puntuación general (0-100)
      - Representación visual con código de colores
      - Indicador de nivel (Excelente, Bueno, Mejorable, Deficiente)
      
      ### IssuesList
      - Lista de problemas identificados
      - Agrupados por categoría
      - Indicador de severidad
      - Detalles expandibles
      
      ### RecommendationsList
      - Lista de recomendaciones de mejora
      - Ordenadas por impacto potencial
      - Detalles expandibles con ejemplos de código
      - Opción para marcar como implementada/ignorada
      
      ## Diseño y Estilos
      
      - Utilizar Tailwind CSS para estilos
      - Implementar diseño responsivo
      - Asegurar contraste adecuado
      - Implementar modo oscuro/claro
      
      ## Interactividad
      
      - Tabs para cambiar entre vistas (Resumen, Problemas, Recomendaciones)
      - Botón para exportar informe
      - Indicador de carga durante análisis
      - Gestión de estados de error

  - name: "testing-strategy"
    description: "Estrategia de pruebas"
    content: |
      # Estrategia de Pruebas para paellaSEO
      
      ## Pruebas Unitarias
      
      Implementar pruebas unitarias para:
      
      1. **Analizador SEO**:
         - Pruebas para cada método de análisis individual
         - Mocks de DOM para simular diferentes estructuras HTML
         - Casos de prueba específicos para cada factor SEO
      
      2. **Sistema de Recomendaciones**:
         - Verificar que genera recomendaciones apropiadas para cada tipo de problema
         - Probar algoritmo de priorización
      
      3. **Componentes UI**:
         - Probar renderizado correcto
         - Verificar manejo de eventos
         - Probar estados de carga y error
      
      ## Pruebas de Integración
      
      Probar flujos completos:
      
      1. Análisis de página > generación de recomendaciones > visualización
      2. Exportación de informe
      3. Guardado en historial
      
      ## Pruebas E2E
      
      Usar Puppeteer para probar en Chrome real:
      
      1. Instalación y carga de la extensión
      2. Análisis en sitios web reales
      3. Interacción con la UI
      
      ## Rendimiento
      
      Pruebas de rendimiento para verificar:
      
      1. Tiempo de análisis < 3 segundos
      2. Uso de memoria < 50MB
      3. Comportamiento con páginas grandes (>1000 elementos)

  - name: "deployment-process"
    description: "Proceso de despliegue"
    content: |
      # Proceso de Despliegue
      
      ## Preparación para Producción
      
      1. Construir la extensión para producción:
      
      ```bash
      npm run build:prod
      ```
      
      2. Verificar que todo el código está minificado y optimizado
      3. Realizar pruebas finales en modo producción
      
      ## Empaquetado
      
      1. Crear archivo ZIP con todos los archivos necesarios:
      
      ```bash
      zip -r paellaSEO.zip dist manifest.json assets
      ```
      
      2. Verificar que el tamaño total es < 5MB
      
      ## Publicación en Chrome Web Store
      
      1. Acceder a la [Chrome Developer Dashboard](https://chrome.google.com/webstore/devconsole/)
      2. Crear nueva entrada para la extensión
      3. Completar información:
         - Nombre: paellaSEO
         - Descripción: clara y enfocada en beneficios
         - Capturas de pantalla de alta calidad
         - Ícono profesional
      4. Subir el archivo ZIP
      5. Pagar la cuota de desarrollador (si es necesario)
      6. Enviar para revisión
      
      ## Actualizaciones
      
      1. Incrementar número de versión en `manifest.json`
      2. Generar nuevo paquete
      3. Subir actualización a Chrome Web Store
      4. Incluir notas de versión detallando cambios 