---
description: "PAELLADOC is an AI-powered interactive documentation system that uses natural language conversations to gather, generate and maintain project documentation."
globs: ["**/*"]
alwaysApply: true
imports:
  - ".cursor/rules/config/imports.mdc"
  - ".cursor/rules/commands/core/help.mdc"
  - ".cursor/rules/commands/core/verification.mdc"
  - ".cursor/rules/modules/memory_management/memory_management.mdc"
  - ".cursor/rules/commands/templates/template.mdc"
  - ".cursor/rules/commands/memory/project_memory.mdc"
  - ".cursor/rules/commands/styles/coding_styles.mdc"
  - ".cursor/rules/commands/styles/git_workflows.mdc"
  - ".cursor/rules/commands/code/code_generation.mdc"
  - ".cursor/rules/commands/product/product_management.mdc"
  - ".cursor/rules/modules/conversation/conversation_workflow.mdc"
  - ".cursor/rules/modules/code_analysis/code_analysis.mdc"
  - ".cursor/rules/commands/code/generate_doc.mdc"
---
# PAELLADOC - MECE Documentation System
description: PAELLA DOC - MECE Documentation System
globs: ["**/*"]
alwaysApply: true
commands:
  # Core Commands
  PAELLA:
    description: "Initiates the documentation process and generates Cursor rules"
    action: "initiate_documentation"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project to document"
        required: false
      - name: "project_type"
        type: "string"
        description: "Type of project to document"
        enum: ["frontend", "backend", "chrome_extension", "fullstack", "mobile_app"]
        default: "frontend"
      - name: "methodologies"
        type: "array"
        description: "Development methodologies to apply"
        items:
          type: "string"
          enum: ["tdd", "github_workflow"]
        default: []
      - name: "git_workflow"
        type: "string"
        description: "Git workflow style to use"
        enum: ["github_flow", "gitflow", "trunk_based", "no_workflow"]
        default: "github_flow"
      - name: "generate_rules"
        type: "boolean"
        description: "Whether to generate Cursor rules from documentation"
        default: true
      - name: "ai_mode"
        type: "string"
        description: "AI operation mode"
        enum: ["autonomous", "collaborative", "advisory"]
        default: "collaborative"
      - name: "help"
        type: "boolean"
        description: "Display help information about available commands"
        default: false
        flag: "-help"
    behavior:
      conversation_required: true
      auto_documentation: false
      conversation_flow: "main_conversation"
      wait_for_user_confirmation: true
      prevent_automatic_generation: true
      allow_minimal_mode: true
      module: "commands/core/help.mdc"
  
  HELP:
    description: "Displays help information about available PAELLADOC commands"
    action: "display_help"
    args:
      - name: "command"
        type: "string"
        description: "Specific command to get help for. If not provided, shows all commands."
        required: false
      - name: "format"
        type: "string"
        description: "Output format for help information"
        enum: ["detailed", "summary", "examples"]
        default: "detailed"
    behavior:
      module: "commands/core/help.mdc"
  
  CONTINUE:
    description: "Continues with an existing project documentation"
    action: "continue_documentation"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project to continue with"
        required: true
      - name: "update_rules"
        type: "boolean"
        description: "Whether to update Cursor rules from documentation"
        default: true
      - name: "sync_templates"
        type: "boolean"
        description: "Whether to synchronize templates with current state"
        default: true
    behavior:
      module: "modules/memory_management/memory_management.mdc"
  
  # Project Memory Commands
  ACHIEVEMENT:
    description: "Records an achievement in the project memory"
    action: "record_achievement"
    args:
      - name: "description"
        type: "string"
        description: "Description of the achievement"
        required: true
      - name: "category"
        type: "string"
        description: "Category of the achievement"
        enum: ["architecture", "development", "documentation", "testing", "security", "performance", "product", "design", "research"]
        required: true
      - name: "impact_level"
        type: "string"
        description: "Level of impact of the achievement"
        enum: ["high", "medium", "low"]
        default: "medium"
    behavior:
      module: "commands/memory/project_memory.mdc"
  
  ISSUE:
    description: "Records an issue in the project memory"
    action: "record_problem"
    args:
      - name: "description"
        type: "string"
        description: "Description of the issue"
        required: true
      - name: "severity"
        type: "string"
        description: "Severity level of the issue"
        enum: ["critical", "high", "medium", "low"]
        required: true
      - name: "area"
        type: "string"
        description: "Area affected by the issue"
        enum: ["product", "technical", "process", "security", "performance"]
        required: true
    behavior:
      module: "commands/memory/project_memory.mdc"
  
  DECISION:
    description: "Records a technical decision in the project memory"
    action: "record_decision"
    args:
      - name: "description"
        type: "string"
        description: "Description of the decision"
        required: true
      - name: "impact"
        type: "array"
        description: "Areas impacted by the decision"
        items:
          type: "string"
          enum: ["architecture", "development", "documentation", "testing", "security", "performance", "product", "design", "process"]
        required: true
      - name: "rationale"
        type: "string"
        description: "Reasoning behind the decision"
        required: true
    behavior:
      module: "commands/memory/project_memory.mdc"
  
  MEMORY:
    description: "Shows the development record"
    action: "show_memory"
    args:
      - name: "filter"
        type: "string"
        description: "Filter memory by category"
        enum: ["all", "achievements", "issues", "decisions", "product", "technical"]
        default: "all"
      - name: "format"
        type: "string"
        description: "Output format"
        enum: ["detailed", "summary", "timeline"]
        default: "detailed"
    behavior:
      module: "commands/memory/project_memory.mdc"
  
  # Style and Workflow Commands
  CODING_STYLE:
    description: "Manages programming style guides for the project"
    action: "manage_coding_style"
    args:
      - name: "operation"
        type: "string"
        description: "Style operation to perform"
        enum: ["apply", "customize", "list", "show"]
        required: true
      - name: "style_name"
        type: "string"
        description: "Name of the style"
        enum: ["frontend", "backend", "chrome_extension", "tdd", "github_workflow"]
        required: true
      - name: "project_name"
        type: "string"
        description: "Name of the project to apply style to"
        required: true
      - name: "customizations"
        type: "string"
        description: "Path to customization file or inline JSON customizations"
        required: false
    behavior:
      module: "commands/styles/coding_styles.mdc"
  
  WORKFLOW:
    description: "Manages Git workflow methodology for the project"
    action: "manage_git_workflow"
    args:
      - name: "operation"
        type: "string"
        description: "Workflow operation to perform"
        enum: ["apply", "customize", "list", "show"]
        required: true
      - name: "workflow_name"
        type: "string"
        description: "Name of the Git workflow"
        enum: ["github_flow", "gitflow", "trunk_based", "no_workflow"]
        required: true
      - name: "project_name"
        type: "string"
        description: "Name of the project to apply workflow to"
        required: true
      - name: "customizations"
        type: "string"
        description: "Path to customization file or inline JSON customizations"
        required: false
    behavior:
      module: "commands/styles/git_workflows.mdc"
  
  # Verification and Rules Commands
  VERIFY:
    description: "Verifies an information source"
    action: "verify_source"
    args:
      - name: "source"
        type: "string"
        description: "URL or reference of the source to verify"
        required: true
      - name: "type"
        type: "string"
        description: "Type of source"
        enum: ["academic", "technical", "blog", "documentation", "market_research", "user_research"]
        required: true
      - name: "reliability"
        type: "string"
        description: "Required reliability level"
        enum: ["high", "medium", "low"]
        default: "high"
    behavior:
      module: "commands/core/verification.mdc"
  
  GENERATE_RULES:
    description: "Generates or updates Cursor rules from documentation"
    action: "generate_cursor_rules"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project"
        required: true
      - name: "rule_type"
        type: "array"
        description: "Types of rules to generate"
        items:
          type: "string"
          enum: ["product", "technical", "process", "security", "all"]
        default: ["all"]
    behavior:
      module: "commands/templates/template.mdc"
  
  # Template Management Commands
  TEMPLATE:
    description: "Manages documentation templates"
    action: "manage_templates"
    args:
      - name: "operation"
        type: "string"
        description: "Template operation to perform"
        enum: ["create", "update", "delete", "list", "sync"]
        required: true
      - name: "template_type"
        type: "string"
        description: "Type of template"
        enum: ["product", "technical", "process", "simplified"]
        required: true
      - name: "template_name"
        type: "string"
        description: "Name of the template"
        required: false
    behavior:
      module: "commands/templates/template.mdc"
  
  # Research and Documentation Commands
  RESEARCH:
    description: "Manages research and definition documentation"
    action: "manage_research"
    args:
      - name: "operation"
        type: "string"
        description: "Research operation to perform"
        enum: ["create", "update", "delete", "list", "show"]
        required: true
      - name: "research_type"
        type: "string"
        description: "Type of research"
        enum: ["market_research", "user_research", "competitive_analysis", "technology_assessment"]
        required: true
      - name: "project_name"
        type: "string"
        description: "Name of the project"
        required: true
    behavior:
      module: "commands/product/product_management.mdc"
  
  # Code Analysis and Documentation Commands
  GENERATE_DOC:
    description: "Interactive documentation generator that works with local paths or GitHub URLs"
    action: "run_script"
    args:
      - name: "repo_path"
        type: "string"
        description: "Path or URL to the repository to analyze and document."
        required: true
      - name: "language"
        type: "string"
        description: "The language for the documentation process and output (e.g., 'es', 'en')."
        required: true
      - name: "output"
        type: "string"
        description: "Output directory for generated documentation"
        required: false
        default: "docs/generated"
      - name: "context_output_file"
        type: "string"
        description: "Path where the extracted context file should be saved."
        required: false
        default: "code_context/extracted/repo_content.txt"
      - name: "clone_dir"
        type: "string"
        description: "Base directory for cloning remote repositories."
        required: false
        default: "temp_cloned_repos"
      - name: "template"
        type: "string"
        description: "Documentation template to potentially use during generation."
        required: false
        default: "standard"
      - name: "force_context_regeneration"
        type: "boolean"
        description: "Force regeneration of the context file even if it exists."
        default: false
      - name: "force_clone"
        type: "boolean"
        description: "Force re-cloning of remote repo by deleting existing directory."
        default: false
    behavior:
      script_path: ".cursor/rules/scripts/run_generate_doc.py"
      script_must_run_first: true
      conversation_required: true
      interactive: true
      menu_handling: "ai_chat"
      post_script_action: "present_documentation_menu"
      menu_definition: "modules/code_analysis/code_analysis.mdc"
      prevent_web_search: true
      force_menu_display: true
      fixed_menu_required: true
      default_language: "es"
      always_ask_language: true
      require_language_confirmation: true
      language_confirmation_first: true
      menu_presentation_action: "show_fixed_menu"
      special_behavior: "no_analysis_before_menu"
      wait_for_script_completion: true
      read_context_after_script: "code_context/extracted/repo_content.txt"
      strict_context_only: true
      code_is_king: true
      prevent_external_knowledge: true
      prevent_inference: true
      context_file_is_sole_source: true
      report_missing_info: true
      documentation_only: true
      no_file_creation: false
      output_in_conversation_only: false
      generate_text_not_code: true
      do_not_execute_or_implement: true
      prevent_directory_creation: false
      context_file_path: "/Users/jlcases/codigo/paelladoc/code_context/extracted/repo_content.txt"
      always_check_context_file: true
      never_rely_on_memory: true
      consult_context_for_every_section: true
      absolute_context_path_required: true
      show_menu_after_documentation: true
      mark_completed_items: true
      use_checkmark_symbol: true
      show_full_menu_again: true
      always_maintain_menu_format: true
      ask_for_next_selection: true
      documentation_output_path: "/Users/jlcases/codigo/paelladoc/docs/generated"
      save_documentation_files: true
      create_documentation_files: true
      allow_documentation_dir_creation: true
      use_existing_templates: true
      follow_template_structure: true
      save_md_files: true
      preserve_template_format: true
      template_is_source_of_structure: true
      force_spanish_language: false
      translate_all_to_spanish: false
      spanish_only_output: false
      verify_file_creation: true
      enforce_spanish_content: false
      verify_md_files: true
  
  # Code Generation Commands
  GENERATE_CODE:
    description: "Generates code based on completed documentation"
    action: "generate_code"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project to generate code for"
        required: true
      - name: "output_path"
        type: "string"
        description: "Path where generated code will be stored"
        required: true
      - name: "code_type"
        type: "string"
        description: "Type of code to generate"
        enum: ["frontend", "backend", "full_stack", "extension", "library"]
        default: "full_stack"
      - name: "language"
        type: "string"
        description: "Primary language to use"
        enum: ["javascript", "typescript", "python", "java", "ruby", "go", "php"]
        default: "typescript"
      - name: "include_tests"
        type: "boolean"
        description: "Whether to generate tests for the code"
        default: true
      - name: "github_repo"
        type: "string"
        description: "Optional GitHub repository to create/push to"
        required: false
    behavior:
      documentation_first: true
      module: "commands/code/code_generation.mdc"
  
  CREATE_REPO:
    description: "Creates a new repository for generated code"
    action: "create_repository"
    args:
      - name: "repo_name"
        type: "string"
        description: "Name of the repository to create"
        required: true
      - name: "repo_type"
        type: "string"
        description: "Type of repository"
        enum: ["github", "gitlab", "local"]
        default: "github"
      - name: "visibility"
        type: "string"
        description: "Repository visibility"
        enum: ["public", "private"]
        default: "private"
      - name: "include_ci"
        type: "boolean"
        description: "Whether to include CI/CD configuration"
        default: true
      - name: "license"
        type: "string"
        description: "License to use"
        enum: ["MIT", "Apache-2.0", "GPL-3.0", "BSD-3-Clause", "None"]
        default: "MIT"
    behavior:
      module: "commands/code/code_generation.mdc"
  
  # Product Management Commands
  STORY:
    description: "Manages user stories for the project"
    action: "manage_user_stories"
    args:
      - name: "operation"
        type: "string"
        description: "Operation to perform on user stories"
        enum: ["create", "update", "delete", "list", "search", "prioritize"]
        required: true
      - name: "story_title"
        type: "string"
        description: "Title of the user story"
        required: false
      - name: "description"
        type: "string"
        description: "Description of the user story"
        required: false
      - name: "priority"
        type: "string"
        description: "Priority of the story"
        enum: ["high", "medium", "low"]
        required: false
    behavior:
      module: "commands/product/product_management.mdc"
  
  SPRINT:
    description: "Plans and manages sprint information"
    action: "manage_sprints"
    args:
      - name: "operation"
        type: "string"
        description: "Operation to perform on sprints"
        enum: ["plan", "start", "end", "update", "list", "report"]
        required: true
      - name: "sprint_name"
        type: "string"
        description: "Name or number of the sprint"
        required: false
      - name: "stories"
        type: "array"
        description: "User stories to include in the sprint"
        required: false
      - name: "start_date"
        type: "string"
        description: "Start date of the sprint (YYYY-MM-DD)"
        required: false
      - name: "end_date"
        type: "string"
        description: "End date of the sprint (YYYY-MM-DD)"
        required: false
    behavior:
      module: "commands/product/product_management.mdc"
  
  MEETING:
    description: "Records and manages meeting notes"
    action: "manage_meetings"
    args:
      - name: "operation"
        type: "string"
        description: "Operation to perform on meetings"
        enum: ["create", "update", "delete", "list", "search"]
        required: true
      - name: "meeting_type"
        type: "string"
        description: "Type of meeting"
        enum: ["planning", "review", "retrospective", "standup", "other"]
        required: false
      - name: "title"
        type: "string"
        description: "Title of the meeting"
        required: false
      - name: "date"
        type: "string"
        description: "Date of the meeting (YYYY-MM-DD)"
        required: false
    behavior:
      module: "commands/product/product_management.mdc"
---

# PAELLADOC Documentation System

PAELLA DOC is a documentation system that follows a MECE approach (Mutually Exclusive, Collectively Exhaustive) to ensure complete and non-redundant documentation.

## System Architecture

The PAELLADOC system is architected with the following key components:

1. **Central Orchestrator (paelladoc.mdc)**
   - Defines all available commands
   - Coordinates command execution
   - Manages delegation to specific modules

2. **Core Modules**
   - Help system for command guidance
   - Verification for source validation
   - Memory management for project state

3. **Feature Modules**
   - Templates management
   - Project memory tracking
   - Coding style guides
   - Git workflows
   - Code generation
   - Product management

4. **Code Analysis & Documentation**
   - Handles repository cloning (if needed), context extraction, and interactive documentation generation via the `GENERATE_DOC` command.

## Command Execution Flow

When a command is issued:

1. The orchestrator recognizes the command pattern
2. Command arguments are parsed and validated
3. The appropriate module is called for execution
4. Results are returned to the user

## Documentation Generation Process

The documentation generation follows a structured process:

1.  The `GENERATE_DOC` command is invoked with a repository path (local or URL).
2.  If a URL is provided, the repository is cloned locally.
3.  The system extracts the code context into a text file using the script `.cursor/rules/scripts/extract_repo_content.py`.
4.  An interactive session begins to analyze the context and generate documentation.
5.  Templates are applied based on project type.
6.  Documentation is saved to the specified output location.

## Memory Management

Project memory is maintained to track:
- Achievements and milestones
- Issues and challenges
- Technical decisions and rationales
- Meeting notes and action items

## Code Generation

The system can generate code based on documentation:
- Create repository structure
- Generate source files
- Implement API endpoints
- Create UI components