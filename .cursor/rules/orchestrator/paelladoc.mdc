---
description: "PAELLADOC is an AI-powered interactive documentation system that uses natural language conversations to gather, generate and maintain project documentation."
interactive_conversation: true
enforce_sequential_questions: true
prevent_multiple_questions: true
interactive_mode: "strict"
wait_between_questions: true
force_one_question_at_a_time: true
globs: ["**/*"]
action: "documentation_system"
createFiles: true
createFolders: true
canCreateFiles: true
canCreateFolders: true
autoCreateFolders: true
fixed_script: true
forced_sequence: true
imports:
  - ".cursor/rules/config/imports.mdc"
  - ".cursor/rules/commands/core/help.mdc"
  - ".cursor/rules/commands/core/verification.mdc"
  - ".cursor/rules/commands/core/paella.mdc"
  - ".cursor/rules/commands/core/continue.mdc"
  - ".cursor/rules/modules/memory_management/memory_management.mdc"
  - ".cursor/rules/commands/templates/template.mdc"
  - ".cursor/rules/commands/memory/project_memory.mdc"
  - ".cursor/rules/commands/styles/coding_styles.mdc"
  - ".cursor/rules/commands/styles/git_workflows.mdc"
  - ".cursor/rules/commands/code/code_generation.mdc"
  - ".cursor/rules/commands/product/product_management.mdc"
  - ".cursor/rules/modules/conversation/conversation_workflow.mdc"
  - ".cursor/rules/modules/code_analysis/code_analysis.mdc"
  - ".cursor/rules/commands/code/generate_doc.mdc"
---
# PAELLADOC - Interactive Documentation System

PAELLADOC is an AI-powered interactive documentation system that uses natural language conversations to gather, generate and maintain project documentation. It aims to solve the common problem of poor or outdated documentation in software projects.

## Command Overview

PAELLADOC supports the following commands:

1. **PAELLA** - Primary command to start the documentation process
   - Initiates an interactive conversation to create new documentation
   - Creates project folders and organizes documentation

2. **VERIFY** - Validates documentation against code
   - Checks if documentation matches the current state of the code
   - Identifies inconsistencies and suggests updates

3. **HELP** - Shows available commands and their usage
   - Provides detailed explanations of how to use each command
   - Shows examples of command usage

4. **GENERATE_CODE** - Creates code from documentation
   - Transforms documentation into working code
   - Uses project requirements to generate implementation

5. **CONTINUE** - Resumes work on an existing documentation project
   - Picks up where you left off in a previous session
   - Analyzes what's missing and suggests next steps

6. **CODING_STYLE** - Manages programming style guides
   - Applies consistent coding standards
   - Creates custom style guides for your project

7. **WORKFLOW** - Manages Git workflow methodologies
   - Implements branching strategies
   - Defines commit message standards

8. **TEMPLATE** - Manages documentation templates
   - Creates, modifies, and applies templates
   - Customizes templates for specific project needs

## Project Memory

PAELLADOC maintains a memory of your project in a `.memory.json` file, which tracks:

- Project metadata (name, purpose, target audience)
- Created documentation
- Documentation progress
- Code-to-documentation mappings
- Last time of update

## Documentation Process

The PAELLADOC workflow follows these steps:

1. **Project Setup**: Define project name and basic information
2. **Template Selection**: Choose document templates to create
3. **Content Creation**: Complete each document with specific information
4. **Verification**: Ensure documentation aligns with code
5. **Maintenance**: Regular updates to keep documentation current

## Usage Examples

To start documenting a new project:
```
PAELLA
```

To check if documentation is up-to-date:
```
VERIFY
```

To see all available commands:
```
HELP
```

To generate code based on documentation:
```
GENERATE_CODE
```

## Best Practices

- Start documentation before writing code
- Update documentation when code changes
- Use templates for consistency
- Verify documentation regularly
- Include both technical and non-technical documentation

## Behavior Definition

```yaml
behavior:
  documentation_first: true
  product_documentation_priority: true
  track_documentation_completion: true
  conversation_required: true
  conversation_flow: "paella_flow"
  wait_for_user_confirmation: true
  interactive: true
  sequential_questions: true
  one_parameter_at_a_time: true
  single_question_mode: true
  wait_for_response: true
  confirm_each_parameter: true
  language_confirmation_first: true
  strict_question_sequence: true
  wait_for_user_response: true
  enforce_one_question_rule: true
  strict_parameter_sequence: true
  require_step_confirmation: true
  prohibit_multiple_questions: true
  force_single_question_mode: true
  max_questions_per_message: 1
  create_memory_file: true
  mandatory_language_question_first: true
  absolute_sequence_enforcement: true
  allow_native_file_creation: true
  use_cursor_file_creation: true
  use_native_file_creation: true
  prevent_scripts: true
  disallow_external_scripts: true
  fixed_question_sequence: true
  sequence_language_project_name: true
  force_exact_sequence: true
  template_based_documentation: true
  offer_all_document_templates: true
  copy_templates_to_project: true
  update_templates_with_project_info: true
  guide_through_document_creation: true
  track_documentation_created: true
  iterative_document_creation: true
  provide_clear_options: true
  always_list_options: true
  document_by_document_approach: true
  update_memory_after_each_document: true
  always_ask_before_document_creation: true
  present_document_descriptions: true
  show_template_menu: true
  allow_document_improvement: true
  ask_for_next_action: true
  simplified_initial_questions: true
  prioritize_document_selection: true
  enforce_memory_json_creation: true
  verify_memory_json_exists: true
  use_attractive_markdown: true
  enhance_lists_with_emojis: true
```

# PAELLADOC Documentation System

PAELLA DOC is a documentation system that follows a MECE approach (Mutually Exclusive, Collectively Exhaustive) to ensure complete and non-redundant documentation.

## System Architecture

The PAELLADOC system is architected with the following key components:

1. **Central Orchestrator (paelladoc.mdc)**
   - Defines all available commands
   - Coordinates command execution
   - Manages delegation to specific modules

2. **Core Modules**
   - Help system for command guidance
   - Verification for source validation
   - Memory management for project state

3. **Feature Modules**
   - Templates management
   - Project memory tracking
   - Coding style guides
   - Git workflows
   - Code generation
   - Product management

4. **Code Analysis & Documentation**
   - Handles repository cloning (if needed), context extraction, and interactive documentation generation via the `GENERATE_DOC` command.

## Command Execution Flow

When a command is issued:

1. The orchestrator recognizes the command pattern
2. Command arguments are parsed and validated
3. The appropriate module is called for execution
4. Results are returned to the user

## Documentation Generation Process

The documentation generation follows a structured process:

1.  The `GENERATE_DOC` command is invoked with a repository path (local or URL).
2.  If a URL is provided, the repository is cloned locally.
3.  The system extracts the code context into a text file using the script `.cursor/rules/scripts/extract_repo_content.py`.
4.  An interactive session begins to analyze the context and generate documentation.
5.  Templates are applied based on project type.
6.  Documentation is saved to the specified output location.

## Memory Management

Project memory is maintained to track:
- Achievements and milestones
- Issues and challenges
- Technical decisions and rationales
- Meeting notes and action items

## Code Generation

The system can generate code based on documentation:
- Create repository structure
- Generate source files
- Implement API endpoints
- Create UI components